Index: configure.ac
===================================================================
--- configure.ac	(revision 36841)
+++ configure.ac	(working copy)
@@ -104,6 +104,7 @@ if test "x$have_function" = "xno" ; then
 fi
 
 # Library required versions
+MCE_REQUIRED=0.1 # FIXME: Need real version here.
 DBUS_REQUIRED=0.60
 GLIB_REQUIRED=2.16.0
 PANGO_REQUIRED=1.0.0
@@ -247,6 +248,37 @@ fi
 AC_SUBST(GCOV_CFLAGS)
 AC_SUBST(GCOV_LIBS)
 
+####################################################################
+# Should we build MCE Maemo package integration
+####################################################################
+
+AC_ARG_ENABLE(mce,
+             AS_HELP_STRING([--enable-mce],
+                            [enable MCE Maemo package integration (default=yes)]), ,
+             [enable_mce=yes])
+
+if test "x$enable_mce" != "xno" ; then
+   PKG_CHECK_MODULES(MCE, 
+                    [mce >= $MCE_REQUIRED],
+                    [have_mce=yes],
+                    [have_mce=no])
+   AC_SUBST(MCE_CFLAGS)
+   AC_SUBST(MCE_LIBS)
+
+   if test "x$have_mce" = "xyes"; then
+      AC_DEFINE(HAVE_MCE, [], [Define if we have MCE Maemo package integration])
+   fi
+else
+   have_mce="no  (disabled)"
+fi
+
+if test "x$enable_mce" = "xyes"; then
+   if test "x$have_mce" != "xyes"; then
+      AC_MSG_ERROR([Couldn't find MCE >= $MCE_REQUIRED.])
+   fi
+fi
+
+AM_CONDITIONAL(HAVE_MCE, test "x$have_mce" = "xyes")
 
 ####################################################################
 # Should we build GLib based unit tests
Index: src/trackerd/Makefile.am
===================================================================
--- src/trackerd/Makefile.am	(revision 36841)
+++ src/trackerd/Makefile.am	(working copy)
@@ -27,12 +27,19 @@ if HAVE_INOTIFY
 inotify_libs = $(top_builddir)/src/libinotify/libinotify.la
 endif
 
+if HAVE_MCE
+mce_sources =								\
+	tracker-mce.c							\
+	tracker-mce.h
+endif
+
 #
 # Daemon sources
 #
 libexec_PROGRAMS = trackerd
 
 trackerd_SOURCES =							\
+	$(mce_sources)							\
 	tracker-backup.h						\
 	tracker-backup.c						\
 	tracker-crawler.c						\
Index: src/trackerd/tracker-mce.c
===================================================================
--- src/trackerd/tracker-mce.c	(revision 0)
+++ src/trackerd/tracker-mce.c	(revision 0)
@@ -0,0 +1,282 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
+/*
+ * Copyright (C) 2009, Nokia
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA  02110-1301, USA.
+ */
+
+#include "config.h"
+
+#include <mce/dbus-names.h>
+#include <mce/mode-names.h>
+
+#define DBUS_API_SUBJECT_TO_CHANGE
+#include <dbus/dbus-glib-lowlevel.h>
+
+#include "tracker-dbus.h"
+#include "tracker-mce.h"
+#include "tracker-status.h"
+
+/* This define means, don't use DBus GLib bindings */
+#define OLD_SCHOOL
+
+typedef struct {
+#ifndef OLD_SCHOOL
+	DBusGProxy *proxy;
+#else  /* OLD_SCHOOL */
+	DBusConnection *connection;
+#endif /* OLD_SCHOOL */
+
+	gchar *call_state;
+	gchar *call_emergency_state;
+} TrackerMCEPrivate;
+
+#ifdef OLD_SCHOOL 
+static DBusHandlerResult mce_dbus_filter_cb (DBusConnection *connection,
+					     DBusMessage    *message,
+					     void           *user_data);
+#endif /* OLD_SCHOOL */
+
+static GStaticPrivate private_key = G_STATIC_PRIVATE_INIT;
+
+static void
+private_free (gpointer data)
+{
+	TrackerMCEPrivate *private;
+
+	private = data;
+
+	g_free (private->call_state);
+	g_free (private->call_emergency_state);
+
+#ifndef OLD_SCHOOL
+	if (private->proxy) {
+		g_object_unref (private->proxy);
+	}
+#else  /* OLD_SCHOOL */
+	if (private->connection) {
+		dbus_connection_remove_filter (private->connection, 
+					       mce_dbus_filter_cb, 
+					       NULL);
+		dbus_connection_unref (private->connection);
+	}
+#endif /* OLD_SCHOOL */
+
+
+	g_free (private);
+}
+
+#ifndef OLD_SCHOOL
+
+static void
+mce_call_state_changed (DBusGProxy  *proxy,
+			const gchar *call_state,
+			const gchar *call_emergency_state,
+			gpointer     user_data)
+{
+	TrackerMCEPrivate *private;
+
+	private = g_static_private_get (&private_key);
+	g_return_if_fail (private != NULL);
+
+	g_message ("Call state changed from '%s'/'%s' --> '%s'/'%s'",
+		   private->call_state ? private->call_state : "",
+		   private->call_emergency_state ? private->call_emergency_state : "",
+		   call_state ? call_state : "",
+		   call_emergency_state ? call_emergency_state : "");
+
+	/* Save new state */
+	g_free (private->call_state);
+	private->call_state = g_strdup (call_state);
+
+	g_free (private->call_emergency_state);
+	private->call_emergency_state = g_strdup (call_emergency_state);
+
+	/* Change our state internally based on new state */
+	if (g_strcmp0 (call_state, MCE_CALL_STATE_NONE)) {
+		/* Continue */
+		tracker_status_set_is_paused_manually (FALSE);
+	} else {
+		/* Pause */
+		tracker_status_set_is_paused_manually (TRUE);
+	}
+}
+
+#else  /* OLD_SCHOOL */
+
+static DBusHandlerResult
+mce_dbus_filter_cb (DBusConnection *connection,
+		    DBusMessage    *message,
+		    void           *user_data)
+{
+	TrackerMCEPrivate *private;
+
+	private = g_static_private_get (&private_key);
+	g_return_val_if_fail (private != NULL, DBUS_HANDLER_RESULT_NOT_YET_HANDLED);
+
+	if (dbus_message_is_signal (message, MCE_SIGNAL_IF, MCE_CALL_STATE_SIG)) {
+		DBusError error;
+		gchar *call_state;
+		gchar *call_emergency_state;
+		
+		dbus_error_init (&error);
+		
+		dbus_message_get_args (message, 
+				       &error,
+				       DBUS_TYPE_STRING, &call_state,
+				       DBUS_TYPE_STRING, &call_emergency_state,
+				       DBUS_TYPE_INVALID);
+
+		g_message ("MCE call/emergency state changed from '%s'/'%s' --> '%s'/'%s'",
+			   private->call_state ? private->call_state : "",
+			   private->call_emergency_state ? private->call_emergency_state : "",
+			   call_state ? call_state : "",
+			   call_emergency_state ? call_emergency_state : "");
+		
+		/* Save new state */
+		g_free (private->call_state);
+		private->call_state = g_strdup (call_state);
+		
+		g_free (private->call_emergency_state);
+		private->call_emergency_state = g_strdup (call_emergency_state);
+		
+		/* Change our state internally based on new state */
+		if (g_strcmp0 (call_state, MCE_CALL_STATE_NONE) == 0) {
+			/* Continue */
+			tracker_status_set_is_paused_manually (FALSE);
+		} else {
+			/* Pause */
+			tracker_status_set_is_paused_manually (TRUE);
+		}
+	}
+
+	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+}
+
+#endif /* OLD_SCHOOL */
+
+gboolean
+tracker_mce_init (void)
+{
+	TrackerMCEPrivate *private;
+
+	private = g_new0 (TrackerMCEPrivate, 1);
+
+	g_static_private_set (&private_key,
+			      private,
+			      private_free);
+
+#ifndef OLD_SCHOOL
+	DBusGConnection *connection;
+	GError *error = NULL;
+
+	g_message ("MCE DBus connection being set up...");
+	connection = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
+
+	if (!connection) {
+		g_critical ("Could not connect to the DBus session bus, %s",
+			    error ? error->message : "no error given.");
+		g_clear_error (&error);
+		return FALSE;
+	}
+
+	private->proxy = 
+		dbus_g_proxy_new_for_name (connection,
+					   MCE_SERVICE,
+					   MCE_SIGNAL_PATH,
+					   MCE_SIGNAL_IF);
+
+	dbus_g_proxy_add_signal (private->proxy,
+				 MCE_CALL_STATE_SIG,
+				 G_TYPE_STRING,
+				 G_TYPE_STRING,
+				 G_TYPE_INVALID);
+
+	dbus_g_proxy_connect_signal (private->proxy,
+				     MCE_CALL_STATE_SIG,
+				     G_CALLBACK (mce_call_state_changed),
+				     NULL,
+				     NULL);
+
+	g_message ("Requesting current call state");
+
+	dbus_g_proxy_call (private->proxy,
+			   MCE_CALL_STATE_GET, &error, 
+			   G_TYPE_INVALID,
+			   G_TYPE_STRING, &private->call_state,
+			   G_TYPE_STRING, &private->call_emergency_state,
+			   G_TYPE_INVALID);
+
+	if (error) {
+		g_critical ("Could not request current call state, %s",
+			    error ? error->message : "no error given.");
+		g_clear_error (&error);
+	} else {
+		g_message ("  Call state is '%s'/'%s'",
+			   private->call_state ? private->call_state : "",
+			   private->call_emergency_state ? private->call_emergency_state : "");
+	}
+#else  /* OLD_SCHOOL */
+	DBusError error;
+	gchar *rule;
+
+	dbus_error_init (&error);
+
+	g_message ("Setting up MCE connection");
+
+	/* DBus connection */
+	private->connection = dbus_bus_get (DBUS_BUS_SYSTEM, &error);
+	if (!private->connection) {
+		g_critical ("Could not connect to the DBus system bus, %s",
+			    error.message ? error.message : "no error given.");
+		dbus_error_free (&error);
+		return FALSE;
+	}
+
+	/* Filter for traffic we are interested in */
+	if (!dbus_connection_add_filter (private->connection, 
+					 mce_dbus_filter_cb, 
+					 NULL, 
+					 NULL)) {
+		g_critical ("Could not add filter to DBus connection");
+		return FALSE;
+	}
+
+	/* Rule for filter */
+	rule = g_strdup_printf ("type='signal', sender='%s', interface='%s'",
+				MCE_SERVICE,
+				MCE_SIGNAL_IF);
+	dbus_bus_add_match (private->connection, rule, &error);
+	g_free (rule);
+
+	if (dbus_error_is_set (&error)) {
+		g_critical ("Could not set rule for filter, %s",
+			    error.message ? error.message : "no error given");
+		dbus_error_free (&error);
+		return FALSE;
+	}
+
+	g_message ("  Ready for call/emergency state changes!");
+#endif /* OLD_SCHOOL */
+
+	return TRUE;
+}
+
+void
+tracker_mce_shutdown (void)
+{
+	g_static_private_set (&private_key, NULL, NULL);
+}
Index: src/trackerd/tracker-mce.h
===================================================================
--- src/trackerd/tracker-mce.h	(revision 0)
+++ src/trackerd/tracker-mce.h	(revision 0)
@@ -0,0 +1,33 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
+/*
+ * Copyright (C) 2009, Nokia
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA  02110-1301, USA.
+ */
+
+#ifndef __TRACKERD_MCE_H__
+#define __TRACKERD_MCE_H__
+
+#include <glib.h>
+
+G_BEGIN_DECLS
+
+gboolean tracker_mce_init     (void);
+void     tracker_mce_shutdown (void);
+
+G_END_DECLS
+
+#endif /* __TRACKERD_MCE_H__ */
Index: src/trackerd/tracker-main.c
===================================================================
--- src/trackerd/tracker-main.c	(revision 36841)
+++ src/trackerd/tracker-main.c	(working copy)
@@ -72,6 +72,10 @@
 #include "tracker-backup.h"
 #include "tracker-daemon.h"
 
+#ifdef HAVE_MCE
+#include "tracker-mce.h"
+#endif
+
 #ifdef G_OS_WIN32
 #include <windows.h>
 #include <pthread.h>
@@ -998,6 +1002,12 @@ main (gint argc, gchar *argv[])
 			  NULL);
 #endif /* HAVE_HAL */
 
+#ifdef HAVE_MCE
+	if (!tracker_mce_init ()) {
+		return EXIT_FAILURE;
+	}
+#endif /* HAVE_MCE */
+
 	tracker_status_init (config, hal);
 
 	tracker_module_config_init ();
@@ -1163,6 +1173,10 @@ main (gint argc, gchar *argv[])
 	tracker_thumbnailer_shutdown ();
 	tracker_log_shutdown ();
 
+#ifdef HAVE_MCE
+	tracker_mce_shutdown ();
+#endif /* HAVE_MCE */
+
 #ifdef HAVE_HAL
 	g_signal_handlers_disconnect_by_func (hal,
 					      mount_point_added_cb,
